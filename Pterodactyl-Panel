#!/usr/bin/env bash
# --------------------------------------------------------------
# Pterodactyl Panel ‚Äì local‚Äëonly installer for Raspberry Pi OS
# --------------------------------------------------------------
# What it does:
#   ‚Ä¢ Installs Nginx, MariaDB, Redis, PHP‚Äë8.2, Composer, Git, ‚Ä¶
#   ‚Ä¢ Sets up a local MySQL database (no remote access)
#   ‚Ä¢ Downloads the latest panel release, configures .env
#   ‚Ä¢ Runs migrations, seeds, creates an admin user
#   ‚Ä¢ Configures Nginx to bind to 127.0.0.1:80 (HTTP only)
#   ‚Ä¢ Installs a systemd service for the queue worker (pteroq)
#   ‚Ä¢ Prints a short ‚Äúinstall summary‚Äù
#
# Requirements:
#   ‚Ä¢ Raspberry Pi OS (Debian‚Äëbased) ‚Äì tested on 64‚Äëbit Bullseye & Bookworm
#   ‚Ä¢ At least 1‚ÄØGB RAM (2‚ÄØGB+ recommended)
#   ‚Ä¢ Run the script as root (or with sudo)
#
# --------------------------------------------------------------

set -euo pipefail   # abort on error, treat unset vars as errors

# -------------------------------------------------------------------------
# 1Ô∏è‚É£  USER‚ÄëCONFIGURABLE SETTINGS ‚Äì change them before you run the script
# -------------------------------------------------------------------------
APP_DOMAIN="localhost"                     # only used for the .env file
APP_URL="http://localhost"                 # panel URL (no HTTPS)
APP_DIR="/var/www/pterodactyl"              # where the panel will live
DB_NAME="panel"
DB_USER="pterodactyl"
DB_PASS="$(tr -dc 'A-Za-z0-9' </dev/urandom | head -c 24)"   # random DB password
ADMIN_EMAIL="admin@local"
ADMIN_USERNAME="admin"
ADMIN_FIRST="Local"
ADMIN_LAST="Admin"
ADMIN_PASS="$(tr -dc 'A-Za-z0-9' </dev/urandom | head -c 16)"   # random admin password
TIMEZONE="$(cat /etc/timezone 2>/dev/null || echo 'UTC')"

# -------------------------------------------------------------------------
# 2Ô∏è‚É£  INTERNAL VARIABLES ‚Äì do NOT edit unless you know what you‚Äôre doing
# -------------------------------------------------------------------------
export DEBIAN_FRONTEND=noninteractive
PHP_VERSION="8.2"                     # the version that ships with Pi OS (adjust if you add a PPA)
PHP_FPM_SERVICE="php${PHP_VERSION}-fpm"
COMPOSER_BIN="/usr/local/bin/composer"
NGINX_CONF="/etc/nginx/sites-available/pterodactyl"
NGINX_LINK="/etc/nginx/sites-enabled/pterodactyl"

# -------------------------------------------------------------------------
# 3Ô∏è‚É£  PRE‚ÄëFLIGHT CHECKS
# -------------------------------------------------------------------------
if [[ $EUID -ne 0 ]]; then
    echo "‚ùå  This script must be run as root. Use: sudo $0"
    exit 1
fi

if [[ -d "$APP_DIR" ]]; then
    echo "‚ùå  Directory $APP_DIR already exists ‚Äì aborting to avoid overwriting."
    exit 1
fi

if ! command -v apt-get >/dev/null 2>&1; then
    echo "‚ùå  apt-get not found ‚Äì this script only works on Debian‚Äëbased systems."
    exit 1
fi

# -------------------------------------------------------------------------
# 4Ô∏è‚É£  UPDATE & INSTALL DEPENDENCIES
# -------------------------------------------------------------------------
echo "üîß  [1/9] Updating package list and installing required packages‚Ä¶"
apt-get update -y
apt-get upgrade -y

apt-get install -y \
    nginx \
    mariadb-server \
    redis-server \
    php${PHP_VERSION}-fpm php${PHP_VERSION}-cli php${PHP_VERSION}-mysql php${PHP_VERSION}-gd \
    php${PHP_VERSION}-zip php${PHP_VERSION}-mbstring php${PHP_VERSION}-bcmath php${PHP_VERSION}-xml \
    php${PHP_VERSION}-curl php${PHP_VERSION}-intl php${PHP_VERSION}-redis \
    curl unzip git ca-certificates gnupg lsb-release software-properties-common

# Enable & start services
systemctl enable --now mariadb
systemctl enable --now redis-server
systemctl enable --now nginx
systemctl enable --now "${PHP_FPM_SERVICE}"

# -------------------------------------------------------------------------
# 5Ô∏è‚É£  INSTALL COMPOSER (global)
# -------------------------------------------------------------------------
if ! command -v composer >/dev/null 2>&1; then
    echo "üîß  [2/9] Installing Composer‚Ä¶"
    EXPECTED_CHECKSUM="$(curl -s https://composer.github.io/installer.sig)"
    php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"
    if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]; then
        echo "‚ùå  Composer installer corrupt ‚Äì aborting."
        rm composer-setup.php
        exit 1
    fi
    php composer-setup.php --quiet --install-dir=/usr/local/bin --filename=composer
    rm composer-setup.php
else
    echo "‚úÖ  Composer already installed."
fi

# -------------------------------------------------------------------------
# 6Ô∏è‚É£  DATABASE SETUP (local only)
# -------------------------------------------------------------------------
echo "üîß  [3/9] Creating MySQL database and user‚Ä¶"
# Secure MariaDB root account with unix_socket (default on Pi OS) ‚Äì no password needed for local root
mysql -u root <<SQL
CREATE DATABASE IF NOT EXISTS \`${DB_NAME}\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
CREATE USER IF NOT EXISTS '${DB_USER}'@'127.0.0.1' IDENTIFIED BY '${DB_PASS}';
GRANT ALL PRIVILEGES ON \`${DB_NAME}\`.* TO '${DB_USER}'@'127.0.0.1';
FLUSH PRIVILEGES;
SQL

# -------------------------------------------------------------------------
# 7Ô∏è‚É£  DOWNLOAD & SETUP PTERODACTYL PANEL
# -------------------------------------------------------------------------
echo "üîß  [4/9] Downloading latest Pterodactyl Panel‚Ä¶"
mkdir -p "${APP_DIR}"
cd "$(dirname "${APP_DIR}")"
# Grab the latest release tarball from GitHub (API fallback if GitHub rate‚Äëlimits)
LATEST_URL=$(curl -s https://api.github.com/repos/pterodactyl/panel/releases/latest \
    | grep browser_download_url | grep ".tar.gz" | cut -d '"' -f 4)
if [[ -z "$LATEST_URL" ]]; then
    echo "‚ùå  Could not fetch latest release URL ‚Äì aborting."
    exit 1
fi
curl -L "$LATEST_URL" -o panel.tar.gz
tar -xzf panel.tar.gz --strip-components=1 -C "${APP_DIR}"
rm panel.tar.gz

# Set proper ownership (nginx runs as www-data)
chown -R www-data:www-data "${APP_DIR}"
chmod -R 755 "${APP_DIR}"

# -------------------------------------------------------------------------
# 8Ô∏è‚É£  LARAVEL .ENV CONFIGURATION
# -------------------------------------------------------------------------
echo "üîß  [5/9] Preparing Laravel .env file‚Ä¶"
cd "${APP_DIR}"
cp .env.example .env

# Helper to replace or add a line in .env
env_set() {
    local key=$1
    local value=$2
    if grep -q "^${key}=" .env; then
        sed -i "s|^${key}=.*|${key}=${value}|g" .env
    else
        echo "${key}=${value}" >> .env
    fi
}

env_set "APP_URL" "${APP_URL}"
env_set "APP_TIMEZONE" "${TIMEZONE}"
env_set "APP_ENV" "local"
env_set "APP_DEBUG" "true"
env_set "DB_CONNECTION" "mysql"
env_set "DB_HOST" "127.0.0.1"
env_set "DB_PORT" "3306"
env_set "DB_DATABASE" "${DB_NAME}"
env_set "DB_USERNAME" "${DB_USER}"
env_set "DB_PASSWORD" "${DB_PASS}"
env_set "CACHE_DRIVER" "redis"
env_set "SESSION_DRIVER" "redis"
env_set "QUEUE_CONNECTION" "redis"
env_set "REDIS_HOST" "127.0.0.1"
env_set "REDIS_PASSWORD" "null"
env_set "REDIS_PORT" "6379"

# -------------------------------------------------------------------------
# 9Ô∏è‚É£  COMPOSER DEPENDENCIES & LARAVEL KEY
# -------------------------------------------------------------------------
echo "üîß  [6/9] Installing PHP dependencies via Composer‚Ä¶"
sudo -u www-data composer install --no-dev --optimize-autoloader

echo "üîß  [7/9] Generating application key‚Ä¶"
sudo -u www-data php artisan key:generate --force

# -------------------------------------------------------------------------
# üîü  DATABASE MIGRATIONS & SEEDING
# -------------------------------------------------------------------------
echo "üîß  [8/9] Running migrations and seeding‚Ä¶"
sudo -u www-data php artisan migrate --seed --force

# -------------------------------------------------------------------------
# 1Ô∏è‚É£1Ô∏è‚É£  CREATE ADMIN USER (non‚Äëinteractive)
# -------------------------------------------------------------------------
echo "üîß  [9/9] Creating admin user‚Ä¶"
# The `p:create:user` command can receive all arguments via STDIN
ADMIN_CMD=$(cat <<EOF
${ADMIN_EMAIL}
${ADMIN_USERNAME}
${ADMIN_FIRST}
${ADMIN_LAST}
${ADMIN_PASS}
${ADMIN_PASS}
y
EOF
)
echo "$ADMIN_CMD" | sudo -u www-data php artisan p:user:make --admin --no-interaction

# -------------------------------------------------------------------------
# 1Ô∏è‚É£2Ô∏è‚É£  NGINX CONFIGURATION (local‚Äëonly)
# -------------------------------------------------------------------------
echo "üîß  Configuring Nginx (binds to 127.0.0.1:80)‚Ä¶"
cat > "${NGINX_CONF}" <<NGX
server {
    listen 127.0.0.1:80;
    server_name ${APP_DOMAIN};

    root ${APP_DIR}/public;
    index index.php;

    access_log /var/log/nginx/pterodactyl.access.log;
    error_log  /var/log/nginx/pterodactyl.error.log;

    client_max_body_size 100M;
    client_body_timeout 120s;

    location / {
        try_files \$uri \$uri/ /index.php?\$query_string;
    }

    location ~ \.php\$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)\$;
        fastcgi_pass unix:/run/php/php${PHP_VERSION}-fpm.sock;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
        fastcgi_param HTTP_PROXY "";
        fastcgi_intercept_errors off;
        fastcgi_buffer_size 16k;
        fastcgi_buffers 4 16k;
    }

    location ~ /\.(?!well-known).* {
        deny all;
    }
}
NGX

ln -sf "${NGINX_CONF}" "${NGINX_LINK}"
nginx -t && systemctl reload nginx

# -------------------------------------------------------------------------
# 1Ô∏è‚É£3Ô∏è‚É£  QUEUE WORKER SERVICE (pteroq)
# -------------------------------------------------------------------------
echo "üîß  Installing systemd service for the queue worker (pteroq)‚Ä¶"
cat > /etc/systemd/system/pteroq.service <<SERVICE
[Unit]
Description=Pterodactyl Queue Worker
After=network.target redis-server.service mariadb.service

[Service]
User=www-data
Group=www-data
Restart=always
WorkingDirectory=${APP_DIR}
ExecStart=${PHP_FPM_SERVICE} -d variables_order=EGPCS -r 'while (true) { exec("php artisan queue:work --queue=high,standard,low --sleep=3 --tries=3"); sleep(1); }'

# The above line runs the Laravel queue worker in a loop ‚Äì it‚Äôs the
# same approach the official docs use for a simple systemd unit.
# If you prefer the ‚Äúphp artisan queue:work --daemon‚Äù style, replace
# the ExecStart line with:
# ExecStart=/usr/bin/php ${APP_DIR}/artisan queue:work --queue=high,standard,low --sleep=3 --tries=3 --daemon

[Install]
WantedBy=multi-user.target
SERVICE

systemctl daemon-reload
systemctl enable --now pteroq

# -------------------------------------------------------------------------
# 1Ô∏è‚É£4Ô∏è‚É£  FINAL SUMMARY
# -------------------------------------------------------------------------
echo
echo "============================================================"
echo "‚úÖ  Pterodactyl Panel installed successfully!"
echo
echo "Panel URL          : ${APP_URL}"
echo "Admin username     : ${ADMIN_USERNAME}"
echo "Admin email        : ${ADMIN_EMAIL}"
echo "Admin password     : ${ADMIN_PASS}"
echo
echo "Database"
echo "  Name             : ${DB_NAME}"
echo "  User             : ${DB_USER}"
echo "  Password         : ${DB_PASS}"
echo
echo "Nginx is listening only on 127.0.0.1:80 ‚Äì the panel is NOT"
echo "exposed to the outside world.  Open a browser on the Pi"
echo "or use an SSH tunnel (e.g. ssh -L 8080:127.0.0.1:80 pi@yourpi) "
echo "to reach it from another machine."
echo
echo "Queue worker (pteroq) is running as a systemd service."
echo "If you ever need to restart it: sudo systemctl restart pteroq"
echo "============================================================"
echo

exit 0
